// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserProviders(t *testing.T) {
	t.Parallel()

	query := UserProviders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserProvidersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserProvidersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserProviders().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserProvidersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserProviderSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserProvidersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserProviderExists(tx, o.Provider, o.ProviderID)
	if err != nil {
		t.Errorf("Unable to check if UserProvider exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserProviderExists to return true, but got false.")
	}
}

func testUserProvidersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userProviderFound, err := FindUserProvider(tx, o.Provider, o.ProviderID)
	if err != nil {
		t.Error(err)
	}

	if userProviderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserProvidersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserProviders().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserProvidersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserProviders().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserProvidersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userProviderOne := &UserProvider{}
	userProviderTwo := &UserProvider{}
	if err = randomize.Struct(seed, userProviderOne, userProviderDBTypes, false, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}
	if err = randomize.Struct(seed, userProviderTwo, userProviderDBTypes, false, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userProviderOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userProviderTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserProviders().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserProvidersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userProviderOne := &UserProvider{}
	userProviderTwo := &UserProvider{}
	if err = randomize.Struct(seed, userProviderOne, userProviderDBTypes, false, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}
	if err = randomize.Struct(seed, userProviderTwo, userProviderDBTypes, false, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userProviderOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userProviderTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userProviderBeforeInsertHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderAfterInsertHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderAfterSelectHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderBeforeUpdateHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderAfterUpdateHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderBeforeDeleteHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderAfterDeleteHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderBeforeUpsertHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func userProviderAfterUpsertHook(e boil.Executor, o *UserProvider) error {
	*o = UserProvider{}
	return nil
}

func testUserProvidersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UserProvider{}
	o := &UserProvider{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userProviderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserProvider object: %s", err)
	}

	AddUserProviderHook(boil.BeforeInsertHook, userProviderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userProviderBeforeInsertHooks = []UserProviderHook{}

	AddUserProviderHook(boil.AfterInsertHook, userProviderAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userProviderAfterInsertHooks = []UserProviderHook{}

	AddUserProviderHook(boil.AfterSelectHook, userProviderAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userProviderAfterSelectHooks = []UserProviderHook{}

	AddUserProviderHook(boil.BeforeUpdateHook, userProviderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userProviderBeforeUpdateHooks = []UserProviderHook{}

	AddUserProviderHook(boil.AfterUpdateHook, userProviderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userProviderAfterUpdateHooks = []UserProviderHook{}

	AddUserProviderHook(boil.BeforeDeleteHook, userProviderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userProviderBeforeDeleteHooks = []UserProviderHook{}

	AddUserProviderHook(boil.AfterDeleteHook, userProviderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userProviderAfterDeleteHooks = []UserProviderHook{}

	AddUserProviderHook(boil.BeforeUpsertHook, userProviderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userProviderBeforeUpsertHooks = []UserProviderHook{}

	AddUserProviderHook(boil.AfterUpsertHook, userProviderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userProviderAfterUpsertHooks = []UserProviderHook{}
}

func testUserProvidersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserProvidersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(userProviderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserProviderToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserProvider
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userProviderDBTypes, false, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserProviderSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserProviderToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserProvider
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userProviderDBTypes, false, strmangle.SetComplement(userProviderPrimaryKeyColumns, userProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserProvidersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserProvidersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserProviderSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testUserProvidersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserProviders().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userProviderDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `Provider`: `character varying`, `ProviderID`: `character varying`, `UpdatedAt`: `timestamp without time zone`, `UserID`: `integer`}
	_                   = bytes.MinRead
)

func testUserProvidersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userProviderColumns) == len(userProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserProvidersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userProviderColumns) == len(userProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserProvider{}
	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userProviderDBTypes, true, userProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userProviderColumns, userProviderPrimaryKeyColumns) {
		fields = userProviderColumns
	} else {
		fields = strmangle.SetComplement(
			userProviderColumns,
			userProviderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserProviderSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserProvidersUpsert(t *testing.T) {
	t.Parallel()

	if len(userProviderColumns) == len(userProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserProvider{}
	if err = randomize.Struct(seed, &o, userProviderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserProvider: %s", err)
	}

	count, err := UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userProviderDBTypes, false, userProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserProvider struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserProvider: %s", err)
	}

	count, err = UserProviders().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
